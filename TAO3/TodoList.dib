#!markdown

- [ ] Support dataflows
  - [ ] Support a change notification for each sources (IWatchable interface)
  - [ ] Added -r option on #!input and #!output with IObsersable<T>
- [ ] SQL Converter
  - [x] Serializer
  - [x] Deserializer
  - [ ] ExpendoObject Deserializer  
- [ ] Add support for a UI framework
  - [ ] Support T Edit<T>(T obj)
  - [ ] Support dynamic Edit(dynamic obj)
  - [ ] Support T Create<T>();
  - [ ] Support dynamic Create(Type type);
  - [ ] Support T Create<T>(T example);//For anonymous types
  - [ ] Support NakedObject UI generation
- [x] Support alias for converters
- [ ] Optimise Excel integration performance for large Excel files
- [ ] Support multiple tabs in notepad++ text source
- [x] Automaticaly set the language of the notepad++ tab depending on the converter used
- [x] Add a way to add user defined properties to converters
  - Ex. Notepad++ language of the converter
- [ ] Add a type generator for the C# converter
- [ ] Reimplement the toast notifier to not use PowerShell
- [x] Reimplement the json class generator
- [x] Reimplement the class generator
  - [x] Enable user to add generation rules
    - Ex. Let user add an anotation to every properties to support their type converter
- [ ] Add file system type generator
- [ ] Add the concept of intermediate source
  - [ ] ILeafSourceNode, ITextSource, TObjectSource, IntermediateSource 
  - Ex. File => TextSource, Directory => IntermediateSource
  - [ ] Support serialization of IntermediateSources
    - Ex. Let user convert a directory structure to json
- [ ] Add a Http client with automatique object serialization/deserialization with TAO3 converters
- [ ] Add methods to the C# syntax node wrapper to enable mutation of the C# code
- [ ] Use the Win32 source generator instead of manually adding the method stubs
  - (https://github.com/microsoft/CsWin32?fbclid=IwAR3DvmqCXRJ3AYcA5gQIilkGl1piuKAYSrHPwmL0ZRZnIhUl1VKuT7bHAgU)
- [ ] Support a Markdown Converter
  - [ ] Support Markdown table serialization/deserialization
- [ ] Add an UI for non programmer
  - [ ] Load notebook
  - [ ] View Macros
  - [ ] Enable/Disable macros
- [ ] Add support formatters the text converters
- [x] Add support Clipboard files as a text source
- [ ] Add an image .net interactive formatter
- [ ] Add a fluent api to add serialization rules to ObjectSerializer
  - [ ] Rules to serialize an object of some type
- [x] Refactor ObjectSerializer to support custom context type and custom options type
- [ ] Add an "head-less" version of TAO3 that can execute notebooks without a text editor (VSCode)
- [x] Add #!out $destination $format $variableName
- [x] Add #!connectMSSQL $connectionString [--kernelName $kernelName]
- [ ] Add a spelling checker API
- [x] Add a translation API
- [x] Path magic command with intellisense
- [ ] Delta/View update helpers
  - [ ] Experiment with patch support
    - [ ] Automaticaly compute Diff/Delta/Patch
    - [ ] https://docs.microsoft.com/en-us/aspnet/core/web-api/jsonpatch?view=aspnetcore-5.0
- [x] Format json/xml etc
- [x] DisplayAsJson() ...
- [x] DisplayToJson() ...
- [x] clipboard image source
- [x] Save Clipboard to file
- [x] Auto save clipboard to file
  - [x]  https://www.addictivetips.com/windows-tips/automatically-save-images-from-the-clipboard-on-windows-10/
- [ ] Provide getting started documentation when user reference TAO3 like extension lab does
- [x] Add a template language (razor)
- [x] Fix inconsistant case (camelCase, PascalCase, etc) for command arguments/options
- [x] Generate SVC client
  - [x] see svcutil.exe
- [ ] Add a bogus data generator
  - [ ] BogusGenerator.Generate<MyType>();//result: new MyType { Prop1 = "Prop1", Prop2 = 0, ...};
- [x] Add `Compare(string left, string right)`, `CompareFiles(string pathLeft, string pathRight)` and `Compare(object left, object right)`
  - [x] Call `code -d <file1> <file2>`
- [x] Add open file command
  - [x] Call `code <file>`
- [ ] VS2022 integration with [VSExtensibility](https://github.com/microsoft/VSExtensibility/blob/main/docs/new-extensibility-model/getting-started/create-your-first-extension.md)
- [ ] React integration
- [x] Support dictionnary for #!translate
  - [x] Add a method to load dictionnaries
  - [x] Use Locality-sensitive hashing for autocompletion
- [x] Create a logo for TAO3
- [x] Add a command for each converter, to easily load values
  - [x] Add an option to load as object or as raw text
  - [x] Example:
```
          #!json <variableName> [options]
          { "A" : 1 }
```
- [x] Add `variable` source
  - [x] Example
```
          #!json myJson --text
          { "A" : 1 }
          #!in variable json myJson
```
- [x] Fix `#!in <source> csvh <name>`
- [x] Support `NULL` as null value in csv converter
  - [x] https://stackoverflow.com/questions/18733819/adding-detectable-nullable-values-to-csvhelper
- [x] Use `[JsonProperty]` for sql serializer
- [x] Add `-tableName` option to sql converter
- [ ] C# serializer using constructor
- [ ] Added a image scanner that extract text from images
- [ ] Added #!infer command, that does only the inferance part of #!input
